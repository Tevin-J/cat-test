{"version":3,"sources":["components/ItemsList/SearchBar.tsx","api.ts","reducer.ts","components/ItemsList/Item.tsx","components/ItemsList/ItemsList.tsx","components/ItemDetails/ItemDetails.tsx","App.tsx","serviceWorker.ts","store.ts","index.tsx"],"names":["InputWrapper","styled","div","SearchBar","props","placeholder","value","term","onChange","e","updateSearch","currentTarget","trimLeft","instance","axios","create","baseURL","api","get","more","initialState","cats","currentCatId","currentCatInfo","removedCats","actions","type","id","catInfo","cat","reducer","state","action","Wrapper","connect","getCatInfo","dispatch","getState","a","response","data","console","log","removeCat","name","shortInfo","useState","isCatRemoved","addRemoveCatClass","classesForCat","className","onClick","catsList","getCats","changeTerm","useEffect","nonRemovedCats","filter","el","indexOf","resultCats","catsItems","length","toLowerCase","searchCat","map","item","key","src","pic","bio","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b8fcf81.chunk.js","sourcesContent":["import React, {ChangeEvent, ChangeEventHandler} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n\r\nconst InputWrapper = styled.div`\r\n  width: 80%;\r\n  margin: 5px auto 20px auto;\r\n  input {\r\n    width: 100%;\r\n  }\r\n`\r\ntype OwnPropsType = {\r\n    updateSearch: (newText: string) => void\r\n    term: string\r\n}\r\ntype PropsType = OwnPropsType\r\nconst SearchBar = (props: PropsType) => {\r\n    const onInputChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.updateSearch(e.currentTarget.value.trimLeft())\r\n    }\r\n    return (\r\n        <InputWrapper>\r\n            <input placeholder={'search'} value={props.term} onChange={onInputChanged}/>\r\n        </InputWrapper>\r\n    )\r\n}\r\nexport default SearchBar","import axios from 'axios'\r\nimport { CatType } from './types/entities'\r\n\r\ntype GetCatInfoType = {\r\n    id: number\r\n    bio: string\r\n    pic: string\r\n}\r\ntype GetCatsResponseType = {\r\n    basepath: string\r\n    data: Array<CatType>\r\n}\r\n/*create api response instance*/\r\nconst instance = axios.create({\r\n    baseURL: `https://cors-anywhere.herokuapp.com/https://mrsoft.by/tz20/`\r\n})\r\n/*api responses*/\r\nexport const api = {\r\n    getCats() {\r\n        return (\r\n            instance.get<GetCatsResponseType>(`list.json`)\r\n        )\r\n    },\r\n    getCatInfo(more: string) {\r\n        return (\r\n            instance.get<GetCatInfoType>(`${more}`)\r\n        )\r\n    }\r\n}","import { CatType, CatInfoType } from \"./types/entities\"\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType, InferActionTypes} from \"./store\";\r\nimport { api } from \"./api\";\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    cats: [] as Array<CatType>,\r\n    currentCatId: null as null | number,\r\n    currentCatInfo: {} as CatInfoType,\r\n    removedCats: [] as Array<CatType>\r\n}\r\n\r\nconst reducer = (state: InitialStateType = initialState, action: AppActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET_CATS':\r\n            return {\r\n                ...state,\r\n                cats: action.cats\r\n            }\r\n        case 'TOGGLE_CURRENT_CAT':\r\n            return {\r\n                ...state,\r\n                currentCatId: action.id\r\n            }\r\n        case 'SET_CAT_INFO':\r\n            return {\r\n                ...state,\r\n                currentCatInfo: action.catInfo\r\n            }\r\n        case 'REMOVE_CAT':\r\n            return {\r\n                ...state,\r\n                removedCats: [...state.removedCats, action.cat]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n/*action creators types*/\r\ntype AppActionType = InferActionTypes<typeof actions>\r\n/*action creators*/\r\nconst actions = {\r\n    setCatsSuccess: (cats: Array<CatType>) => ({type: 'SET_CATS', cats} as const),\r\n    toggleCurrentCat: (id: number) => ({type: 'TOGGLE_CURRENT_CAT', id} as const),\r\n    setCatInfoSuccess: (catInfo: CatInfoType) => ({type: 'SET_CAT_INFO', catInfo} as const),\r\n    removeCatSuccess: (cat: CatType) => ({type: 'REMOVE_CAT', cat} as const)\r\n}\r\n/*thunk creators*/\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, AppActionType>\r\nexport const getCats = (): ThunkType => async (dispatch: ThunkDispatch<AppStateType, unknown, AppActionType>,\r\n                                         getState: () => AppStateType) => {\r\n    let response = await api.getCats()\r\n    try {\r\n        dispatch(actions.setCatsSuccess(response.data.data))\r\n    } catch (e){\r\n        console.log(e);\r\n    }\r\n}\r\nexport const getCatInfo = (id: number, more: string): ThunkType => async (dispatch: ThunkDispatch<AppStateType, unknown, AppActionType>,\r\n                                                                           getState: () => AppStateType) => {\r\n    dispatch(actions.toggleCurrentCat(id))\r\n    let response = await api.getCatInfo(more)\r\n    try {\r\n        dispatch(actions.setCatInfoSuccess(response.data))\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\nexport const removeCat = (cat: CatType): ThunkType => async (dispatch: ThunkDispatch<AppStateType, unknown, AppActionType>,\r\n                                                                          getState: () => AppStateType) => {\r\n    dispatch(actions.removeCatSuccess(cat))\r\n}\r\nexport default reducer","import React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../store\";\r\nimport {getCatInfo, removeCat} from \"../../reducer\";\r\nimport './Item.css'\r\nimport {CatType} from \"../../types/entities\";\r\n\r\nconst Wrapper = styled.div`\r\n  margin-left: 5px;\r\n  border: 2px solid skyblue;\r\n  position: relative;\r\n  :hover {\r\n    background-color:skyblue;\r\n  }\r\n  button {\r\n    position: absolute;\r\n    top: 0;\r\n    right: 0;\r\n  }\r\n`\r\n\r\ntype OwnPropsType = {\r\n    id: number\r\n    name: string\r\n    more: string\r\n    shortInfo: string\r\n    cat: CatType\r\n}\r\ntype MDTPType = {\r\n    getCatInfo: (id: number, more: string) => void\r\n    removeCat: (cat: CatType) => void\r\n}\r\ntype PropsType = OwnPropsType & MDTPType\r\n\r\nconst Item: React.FC<PropsType> = (props) => {\r\n    /*props*/\r\n    const name = props.name\r\n    const shortInfo = props.shortInfo\r\n    const id = props.id\r\n    const more = props.more\r\n    /*hook*/\r\n    const [isCatRemoved, addRemoveCatClass] = useState(false)\r\n    /*classForRemovedCat*/\r\n    const classesForCat = isCatRemoved ? 'removedCat' : ''\r\n    return (\r\n        <Wrapper className={classesForCat}>\r\n            <div onClick={() => props.getCatInfo(id, more)}>\r\n                <div>{name}</div>\r\n                <div>{shortInfo}</div>\r\n            </div>\r\n            {isCatRemoved ? '' : <button onClick={() => {\r\n                props.removeCat(props.cat)\r\n                addRemoveCatClass(true)\r\n            }}>X</button>}\r\n        </Wrapper>\r\n    )\r\n}\r\nexport default connect<{}, MDTPType, {}, AppStateType>(null, {getCatInfo, removeCat})(Item)","import * as React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport {connect} from \"react-redux\";\r\nimport {CatType} from \"../../types/entities\";\r\nimport {AppStateType} from \"../../store\";\r\nimport {getCats} from \"../../reducer\";\r\nimport {useEffect, useState} from \"react\";\r\nimport Item from \"./Item\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(1, 1fr);\r\n  grid-gap: 10px;\r\n`\r\n\r\ntype MSTPType = {\r\n    cats: Array<CatType>\r\n    removedCats: Array<CatType>\r\n}\r\ntype MDTPType = {\r\n    getCats: () => void\r\n}\r\ntype PropsType = MDTPType & MSTPType\r\n\r\nconst ItemsList: React.FC<PropsType> = (props) => {\r\n    /*hook*/\r\n    const [term, changeTerm] = useState('')\r\n    /*first rendering component*/\r\n    useEffect(() => {\r\n        props.getCats()\r\n    }, [])\r\n    /*search bar realization*/\r\n    const searchCat = (cats: Array<CatType>, term: string): Array<CatType> => {\r\n        if (term.length === 0) {\r\n            return cats\r\n        }\r\n        return cats.filter(cat => {\r\n            return cat.name.toLowerCase().indexOf(term.toLowerCase()) > -1\r\n        })\r\n    }\r\n    const updateSearch = (term: string) => {\r\n        changeTerm(term)\r\n    }\r\n    let nonRemovedCats = []\r\n    nonRemovedCats = props.cats.filter(el => props.removedCats.indexOf(el) < 0)\r\n    let resultCats = [...nonRemovedCats, ...props.removedCats]\r\n    console.log(resultCats);\r\n    /*render filtered cats*/\r\n    const catsItems = searchCat(resultCats, term).map(item => <Item key={item.id} id={item.id}\r\n                                                   name={item.name} more={item.more}\r\n                                                   shortInfo={item.shortInfo} cat={item}/>)\r\n    return (\r\n        <div>\r\n            <SearchBar updateSearch={updateSearch} term={term}/>\r\n            <Wrapper>\r\n                {catsItems}\r\n            </Wrapper>\r\n        </div>\r\n    )\r\n}\r\nconst mstp = (state: AppStateType): MSTPType => {\r\n    return {\r\n        cats: state.catsList.cats,\r\n        removedCats: state.catsList.removedCats\r\n    }\r\n}\r\nexport default connect<MSTPType, MDTPType, {}, AppStateType>(mstp, {getCats})(ItemsList)","import * as React from \"react\";\r\nimport {CatInfoType, CatType} from \"../../types/entities\";\r\nimport {AppStateType} from \"../../store\";\r\nimport {connect} from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  margin: 30px;\r\n`\r\n\r\ntype MSTPType = {\r\n    cats: Array<CatType>\r\n    currentCatId: number | null\r\n    currentCatInfo: CatInfoType\r\n}\r\ntype PropsType = MSTPType\r\n\r\nconst ItemDetails: React.FC<PropsType> = (props) => {\r\n    /*props*/\r\n    const currentCatId = props.currentCatId\r\n    const cats = props.cats\r\n    const currentCatInfo = props.currentCatInfo\r\n\r\n    if (cats && currentCatId) {\r\n        return (\r\n            <Wrapper>\r\n                <h1>{cats.filter((cat: CatType) => cat.id === currentCatId)[0].name}</h1>\r\n                <img src={`https://mrsoft.by/tz20/${currentCatInfo.pic}`}/>\r\n                <div>{currentCatInfo.bio}</div>\r\n            </Wrapper>\r\n        )\r\n    } else {\r\n        return (\r\n            <Wrapper>\r\n                <h1>Select a cat</h1>\r\n            </Wrapper>\r\n        )\r\n    }\r\n}\r\nconst mstp = (state: AppStateType): MSTPType => {\r\n    return {\r\n        cats: state.catsList.cats,\r\n        currentCatId: state.catsList.currentCatId,\r\n        currentCatInfo: state.catsList.currentCatInfo\r\n    }\r\n}\r\nexport default connect<MSTPType, {}, {}, AppStateType>(mstp, {})(ItemDetails)","import React from 'react'\nimport ItemsList from \"./components/ItemsList/ItemsList\";\nimport ItemDetails from \"./components/ItemDetails/ItemDetails\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n    width: 50%;\n    margin: 50px auto;\n    display: grid;\n    grid-template-columns: 30% 70%;\n    border: 2px solid #000000;\n`\n\nfunction App() {\n  return (\n    <Wrapper>\n      <ItemsList/>\n      <ItemDetails/>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport reducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    catsList: reducer\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesType<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionTypes<T extends {[key: string]: (...args:any)=> any}> = ReturnType<PropertiesType<T>>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk))\r\nexport default store\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}